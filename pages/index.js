import Head from 'next/head';
import Header from "../components/header";
import Button from "@material-tailwind/react/Button";
import Icon from "@material-tailwind/react/Icon";
import ArrivalPage from '../components/ArrivalPage';
import { getSession, useSession, signOut } from "next-auth/client";
import { useEffect, useState } from 'react';
import Modal from '@material-tailwind/react/Modal';
import ModalBody from '@material-tailwind/react/ModalBody';
import ModalFooter from '@material-tailwind/react/ModalFooter';
import { db } from "../firebase";
import firebase from 'firebase';
import { useCollectionOnce } from "react-firebase-hooks/firestore"
import NotePreview from '../components/NotePreview';

export default function Home() {

  const [session] = useSession();
  
  if(!session) return <ArrivalPage />

  const [showModal, setShowModal] = useState(false);
  const [input, setInput] = useState("");
  const [searchTerm, setSearchTerm] = useState("")


  const [notes] = useCollectionOnce(
    db.collection('userDocs')
    .doc(session.user.email)
    .collection('docs')
    .orderBy('timestamp', 'desc')
  );

  function deleteNote (clickedId) {
    console.log(clickedId)
    db.collection('userDocs')
    .doc(session.user.email)
    .collection("docs")
    .doc(clickedId).delete()
  }

  useEffect(deleteNote, [])

  function createDocument () {

    if (!input) return;

    db.collection('userDocs')
      .doc(session.user.email)
      .collection("docs")
      .add({
        fileName: input,
        timestamp: firebase.firestore.FieldValue.serverTimestamp()
      })

    setInput("");
    setShowModal(false);
    window.location.reload(false);
  }

  const modal = (
    <Modal
    className="font-sans font-extralight"
    size="sm"
    active={showModal}
    toggler={() => setShowModal(false)}
    >
      <ModalBody>
        <input
          className="font-sans text-extralight text-black"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          type="text"
          className="outline-none w-full"
          placeholder="Enter name of new note..."
          onKeyDown={(e) => e.key === "Enter" && createDocument()}
        />
      </ModalBody>
      <ModalFooter>
        <Button
          color="black"
          buttonType="link"
          onClick={(e) => setShowModal(false)}
          ripple="dark"
        >
          Cancel
        </Button>

        <Button color="gray" onClick={createDocument} ripple="light">
          Create
        </Button>
      </ModalFooter>
    </Modal>
  )

  function handleSearchChange (e) {
    setSearchTerm(e.target.value)
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* header component  */}
      <div className="sticky top-0 z-50 flex items-center px-4 py- 2 bg-black">
            <Button
                buttonType="outline"
                color="white"
                rounded={true}
                iconOnly={true}
                ripple="dark"
                className="md:inline-flex h-20 w-20 border-0"
            >
                <Icon color="white" name="menu" size="3xl" />
            </Button>

            <div className="mx-5 md:mx-20 flex flex-grow items-center p-5 py-2 bg-white rounded-lg">
                <Icon name="search" size="3xl" color="gray" />
                <input onChange={handleSearchChange} type="text" placeholder="Search" className="flex-grow px-5 text-base bg-transparent outline-none font-sans font-extralight" />
            </div>

            <Button
                buttonType="outline"
                color="white"
                rounded={true}
                iconOnly={true}
                ripple="dark"
                className="md:inline-flex h-20 w-20 border-0"
            >
            <Icon
                onClick={signOut}
                name="logout"
                size="3xl"
                color="white"
            />
            </Button>

            {/* <img
                onClick={signOut}
                loading="lazy"
                className="cursor-pointer h-12 w-12 rounded-full ml-2"
                src={session?.user?.image}
                alt=""
            /> */}
        </div>

      {/* <Header /> */}
      {modal}

      <section className="bg-black pb-10 px-10 md:px-0 font-sans font-extralight">
        <div className="max-w-3xl mx-auto">
          <div className="flex items-center justify-between py-6">
            <h2 className='text-white text-lg'>Create a New Note</h2>
            <Button
                color="gray"
                buttonType="outline"
                iconOnly={true}
                ripple="dark"
                className="border-0"
            >
                <Icon name="more_vert" size="3xl" color="white"/>
            </Button>
          </div>
          <div onClick={() => setShowModal(true)}>
            <button className="cursor-pointer">
              <Icon name="note_add" size="5xl" color="white"/>
            </button>
          </div>
        </div>
      </section>

      <section className="bg-black px-10 md:px-0 pb-96">
        <div className="max-w-3xl mx-auto py-8 text-sm text-white font-sans font-extralight">
          <div className="flex items-center justify-between pb-5 text-center">
            <h2 className="ml-2">My Notes</h2>
            <p className="mr-2">Date Created</p>
          </div>
      
        {notes?.docs.filter((note) => {
            if (searchTerm == "") {
              return note;
            }
            else if (note.data().fileName.toLowerCase().includes(searchTerm.toLowerCase())) {
              return note;
            }
        }).map((note) => (
          <NotePreview
            key={note.id}
            id={note.id}
            fileName={note.data().fileName}
            date={note.data().timestamp}
            deleteNote={deleteNote}
          />
        ))}

        </div>
      </section>
    </div>
  )
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  return {
    props: {
      session
    }
  }
}
